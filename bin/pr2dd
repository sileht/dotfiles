#!/usr/bin/env python3

import argparse
import typing
import urllib.parse


def _url_parser(
    url: str,
) -> typing.Tuple[str, typing.Optional[str], typing.Optional[int]]:

    path = [el for el in urllib.parse.urlparse(url).path.split("/") if el != ""]

    pull_number: typing.Optional[str]
    repo: typing.Optional[str]

    try:
        owner, repo, _, pull_number = path
    except ValueError:
        pull_number = None
        try:
            owner, repo = path
        except ValueError:
            if len(path) == 1:
                owner = path[0]
                repo = None
            else:
                raise ValueError

    return (
        owner,
        repo,
        None if pull_number is None else int(pull_number),
    )


def report(url: str) -> None:
    try:
        owner_login, repo, pull_number = _url_parser(url)
    except ValueError:
        print(f"{url} is not valid")
        return None

    query = f"@gh_owner:{owner_login}"
    if repo is not None:
        query += f" @gh_repo:{repo}"
    if pull_number is not None:
        query += f" (@gh_pull:{pull_number} OR @gh_pulls_queued:{pull_number})"

    query = urllib.parse.quote(query)
    print(
        "https://app.datadoghq.com/logs"
        f"?query=source%3Apython%20service%3Aengine-worker%20{query}"
        "&cols=%40gh_owner%2C%40gh_repo%2C%40gh_branch%2C%40gh_pull%2C%40worker_id"
        "&index=main"
        "&integration_id="
        "&integration_short_name="
        "&messageDisplay=inline"
        "&saved_view=396668"
        "&stream_sort=%40worker_id%2Cdesc"
        "&viz=stream"
        "&live=true"
    )


def main() -> None:
    parser = argparse.ArgumentParser(description="Get datadog url")
    parser.add_argument("url", help="Pull request url")
    args = parser.parse_args()
    report(args.url)


main()
