#!/bin/bash

set -x

release=$1
ref=$2

valid_release=$(git branch -r | grep  "\<origin/stable/$release\>")
if [ ! "$valid_release" ] ; then
    echo "Release $release is invalid"
    exit 1
fi

if [ ! "$ref" ]; then
    ref=$(git rev-parse --abbrev-ref HEAD)
fi
#changeid=$(git show |awk '/Change-Id/{print $2}')

alreadyexist=$(git branch -l | grep $ref-$release)
git fetch origin
if [ "$alreadyexist" ]; then
    git checkout $ref-$release
#    newchangeid=$(git show |awk '/Change-Id/{print $2}')
#    echo "Found previous Change-Id $newchangeid, reuse it."
    git reset --hard origin/stable/$release
else
    git checkout origin/stable/$release -b $ref-$release
fi

git cherry-pick -x $ref

#if [ "$newchangeid" ] ; then
#    GIT_EDITOR="sed -ie '/Change-Id/s/.*/Change-Id: $newchangeid/'" git commit --amend -a
#else
#    GIT_EDITOR="sed -ie '/Change-Id/d'" git commit --amend -a
#fi
#GIT_EDITOR="sed -ie '/Change-Id/a(cherry picked from commit $changeid)'" git commit --amend -a
[ -f ".gitreview" ] && git-review || git pr
git checkout $ref
